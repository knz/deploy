diff -x *~ -uNr orig/gcc-5.4.0/gcc/bitmap.c sources/gcc-5.4.0/gcc/bitmap.c
--- orig/gcc-5.4.0/gcc/bitmap.c	2015-01-05 13:33:28.000000000 +0100
+++ sources/gcc-5.4.0/gcc/bitmap.c	2019-08-18 20:59:15.476175000 +0200
@@ -2170,8 +2170,8 @@
       sprintf (s, "%s:%i (%s)", s1, d->line, d->function);
       s[41] = 0;
       fprintf (stderr,
-	       "%-41s %9u %15"PRId64" %15"PRId64" %15"PRId64
-	       " %10"PRId64" %10"PRId64"\n",
+	       "%-41s %9u %15" PRId64 " %15" PRId64 " %15" PRId64
+	       " %10" PRId64 " %10" PRId64 "\n",
 	       s, d->created,
 	       d->allocated, d->peak, d->current,
 	       d->nsearches, d->search_iter);
@@ -2204,7 +2204,7 @@
   bitmap_desc_hash->traverse <bitmap_output_info *, print_statistics> (&info);
   fprintf (stderr, "---------------------------------------------------------------------------------\n");
   fprintf (stderr,
-	   "%-41s %9"PRId64" %15"PRId64"\n",
+	   "%-41s %9" PRId64 " %15" PRId64 "\n",
 	   "Total", info.count, info.size);
   fprintf (stderr, "---------------------------------------------------------------------------------\n");
 }
diff -x *~ -uNr orig/gcc-5.4.0/gcc/c/c-aux-info.c sources/gcc-5.4.0/gcc/c/c-aux-info.c
--- orig/gcc-5.4.0/gcc/c/c-aux-info.c	2015-01-09 21:18:42.000000000 +0100
+++ sources/gcc-5.4.0/gcc/c/c-aux-info.c	2019-08-18 20:54:29.839218000 +0200
@@ -319,7 +319,7 @@
 	  else
 	    {
 	      char buff[23];
-	      sprintf (buff, "["HOST_WIDE_INT_PRINT_DEC"]",
+	      sprintf (buff, "[" HOST_WIDE_INT_PRINT_DEC "]",
 		       int_size_in_bytes (t)
 		       / int_size_in_bytes (TREE_TYPE (t)));
 	      ret_val = gen_type (concat (ret_val, buff, NULL),
diff -x *~ -uNr orig/gcc-5.4.0/gcc/cfg.c sources/gcc-5.4.0/gcc/cfg.c
--- orig/gcc-5.4.0/gcc/cfg.c	2015-01-09 21:18:42.000000000 +0100
+++ sources/gcc-5.4.0/gcc/cfg.c	2019-08-18 21:00:10.513739000 +0200
@@ -508,7 +508,7 @@
   if (e->count && do_details)
     {
       fputs (" count:", file);
-      fprintf (file, "%"PRId64, e->count);
+      fprintf (file, "%" PRId64, e->count);
     }
 
   if (e->flags && do_details)
@@ -756,7 +756,7 @@
       if (flags & TDF_DETAILS)
 	{
 	  struct function *fun = DECL_STRUCT_FUNCTION (current_function_decl);
-	  fprintf (outf, ", count " "%"PRId64,
+	  fprintf (outf, ", count " "%" PRId64,
 		   (int64_t) bb->count);
 	  fprintf (outf, ", freq %i", bb->frequency);
 	  if (maybe_hot_bb_p (fun, bb))
diff -x *~ -uNr orig/gcc-5.4.0/gcc/cfghooks.c sources/gcc-5.4.0/gcc/cfghooks.c
--- orig/gcc-5.4.0/gcc/cfghooks.c	2016-02-28 07:43:07.000000000 +0100
+++ sources/gcc-5.4.0/gcc/cfghooks.c	2019-08-18 21:00:37.139499000 +0200
@@ -330,7 +330,7 @@
     internal_error ("%s does not support dump_bb_for_graph",
 		    cfg_hooks->name);
   if (bb->count)
-    pp_printf (pp, "COUNT:" "%"PRId64, bb->count);
+    pp_printf (pp, "COUNT:" "%" PRId64, bb->count);
   pp_printf (pp, " FREQ:%i |", bb->frequency);
   pp_write_text_to_stream (pp);
   if (!(dump_flags & TDF_SLIM))
diff -x *~ -uNr orig/gcc-5.4.0/gcc/cgraph.c sources/gcc-5.4.0/gcc/cgraph.c
--- orig/gcc-5.4.0/gcc/cgraph.c	2016-03-21 17:05:37.000000000 +0100
+++ sources/gcc-5.4.0/gcc/cgraph.c	2019-08-18 21:01:30.255218000 +0200
@@ -1326,7 +1326,7 @@
 	  if (dump_file)
 	    fprintf (dump_file,
 		     "Expanding speculative call of %s/%i -> %s/%i count:"
-		     "%"PRId64"\n",
+		     "%" PRId64 "\n",
 		     xstrdup_for_dump (e->caller->name ()),
 		     e->caller->order,
 		     xstrdup_for_dump (e->callee->name ()),
@@ -1958,7 +1958,7 @@
   if (indirect_inlining_edge)
     fprintf (f, "(indirect_inlining) ");
   if (count)
-    fprintf (f, "(%"PRId64"x) ", (int64_t)count);
+    fprintf (f, "(%" PRId64 "x) ", (int64_t)count);
   if (frequency)
     fprintf (f, "(%.2f per call) ", frequency / (double)CGRAPH_FREQ_BASE);
   if (can_throw_external)
@@ -1994,7 +1994,7 @@
   fprintf (f, "  First run: %i\n", tp_first_run);
   fprintf (f, "  Function flags:");
   if (count)
-    fprintf (f, " executed %"PRId64"x",
+    fprintf (f, " executed %" PRId64 "x",
 	     (int64_t)count);
   if (origin)
     fprintf (f, " nested in: %s", origin->asm_name ());
diff -x *~ -uNr orig/gcc-5.4.0/gcc/config/elfos.h sources/gcc-5.4.0/gcc/config/elfos.h
--- orig/gcc-5.4.0/gcc/config/elfos.h	2015-01-05 13:33:28.000000000 +0100
+++ sources/gcc-5.4.0/gcc/config/elfos.h	2019-08-18 20:52:50.369787000 +0200
@@ -99,7 +99,7 @@
 
 #undef  ASM_OUTPUT_SKIP
 #define ASM_OUTPUT_SKIP(FILE, SIZE) \
-   fprintf ((FILE), "%s"HOST_WIDE_INT_PRINT_UNSIGNED"\n",\
+   fprintf ((FILE), "%s" HOST_WIDE_INT_PRINT_UNSIGNED "\n",\
 	    SKIP_ASM_OP, (SIZE))
 
 /* This is how to store into the string LABEL
@@ -167,7 +167,7 @@
     {									\
       fprintf ((FILE), "%s", COMMON_ASM_OP);				\
       assemble_name ((FILE), (NAME));					\
-      fprintf ((FILE), ","HOST_WIDE_INT_PRINT_UNSIGNED",%u\n",		\
+      fprintf ((FILE), "," HOST_WIDE_INT_PRINT_UNSIGNED ",%u\n",		\
 	       (SIZE), (ALIGN) / BITS_PER_UNIT);			\
     }									\
   while (0)
diff -x *~ -uNr orig/gcc-5.4.0/gcc/config/sparc/sparc.h sources/gcc-5.4.0/gcc/config/sparc/sparc.h
--- orig/gcc-5.4.0/gcc/config/sparc/sparc.h	2015-03-03 16:04:02.000000000 +0100
+++ sources/gcc-5.4.0/gcc/config/sparc/sparc.h	2019-08-18 20:52:21.579411000 +0200
@@ -1694,7 +1694,7 @@
     fprintf (FILE, "\t.align %d\n", (1<<(LOG)))
 
 #define ASM_OUTPUT_SKIP(FILE,SIZE)  \
-  fprintf (FILE, "\t.skip "HOST_WIDE_INT_PRINT_UNSIGNED"\n", (SIZE))
+  fprintf (FILE, "\t.skip " HOST_WIDE_INT_PRINT_UNSIGNED "\n", (SIZE))
 
 /* This says how to output an assembler line
    to define a global common symbol.  */
@@ -1702,7 +1702,7 @@
 #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \
 ( fputs ("\t.common ", (FILE)),		\
   assemble_name ((FILE), (NAME)),		\
-  fprintf ((FILE), ","HOST_WIDE_INT_PRINT_UNSIGNED",\"bss\"\n", (SIZE)))
+  fprintf ((FILE), "," HOST_WIDE_INT_PRINT_UNSIGNED ",\"bss\"\n", (SIZE)))
 
 /* This says how to output an assembler line to define a local common
    symbol.  */
@@ -1710,7 +1710,7 @@
 #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGNED)		\
 ( fputs ("\t.reserve ", (FILE)),					\
   assemble_name ((FILE), (NAME)),					\
-  fprintf ((FILE), ","HOST_WIDE_INT_PRINT_UNSIGNED",\"bss\",%u\n",	\
+  fprintf ((FILE), "," HOST_WIDE_INT_PRINT_UNSIGNED ",\"bss\",%u\n",	\
 	   (SIZE), ((ALIGNED) / BITS_PER_UNIT)))
 
 /* A C statement (sans semicolon) to output to the stdio stream
diff -x *~ -uNr orig/gcc-5.4.0/gcc/cppbuiltin.c sources/gcc-5.4.0/gcc/cppbuiltin.c
--- orig/gcc-5.4.0/gcc/cppbuiltin.c	2015-01-09 21:18:42.000000000 +0100
+++ sources/gcc-5.4.0/gcc/cppbuiltin.c	2019-08-18 21:02:09.357664000 +0200
@@ -143,7 +143,7 @@
 define_builtin_macros_for_type_sizes (cpp_reader *pfile)
 {
 #define define_type_sizeof(NAME, TYPE)                             \
-    cpp_define_formatted (pfile, NAME"="HOST_WIDE_INT_PRINT_DEC,   \
+    cpp_define_formatted (pfile, NAME "=" HOST_WIDE_INT_PRINT_DEC,   \
                           tree_to_uhwi (TYPE_SIZE_UNIT (TYPE)))
 
   define_type_sizeof ("__SIZEOF_INT__", integer_type_node);
diff -x *~ -uNr orig/gcc-5.4.0/gcc/defaults.h sources/gcc-5.4.0/gcc/defaults.h
--- orig/gcc-5.4.0/gcc/defaults.h	2015-03-03 16:04:02.000000000 +0100
+++ sources/gcc-5.4.0/gcc/defaults.h	2019-08-18 20:53:03.104488000 +0200
@@ -123,7 +123,7 @@
     {									\
       fprintf ((FILE), "\t%s\t", TLS_COMMON_ASM_OP);			\
       assemble_name ((FILE), (NAME));					\
-      fprintf ((FILE), ","HOST_WIDE_INT_PRINT_UNSIGNED",%u\n",		\
+      fprintf ((FILE), "," HOST_WIDE_INT_PRINT_UNSIGNED ",%u\n",		\
 	       (SIZE), DECL_ALIGN (DECL) / BITS_PER_UNIT);		\
     }									\
   while (0)
diff -x *~ -uNr orig/gcc-5.4.0/gcc/dwarf2cfi.c sources/gcc-5.4.0/gcc/dwarf2cfi.c
--- orig/gcc-5.4.0/gcc/dwarf2cfi.c	2015-01-15 14:28:42.000000000 +0100
+++ sources/gcc-5.4.0/gcc/dwarf2cfi.c	2019-08-18 21:03:48.521362000 +0200
@@ -3258,7 +3258,7 @@
     case DW_CFA_offset_extended:
     case DW_CFA_offset_extended_sf:
       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, 1);
-      fprintf (f, "\t.cfi_offset %lu, "HOST_WIDE_INT_PRINT_DEC"\n",
+      fprintf (f, "\t.cfi_offset %lu, " HOST_WIDE_INT_PRINT_DEC "\n",
 	       r, cfi->dw_cfi_oprnd2.dw_cfi_offset);
       break;
 
@@ -3281,7 +3281,7 @@
     case DW_CFA_def_cfa:
     case DW_CFA_def_cfa_sf:
       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, 1);
-      fprintf (f, "\t.cfi_def_cfa %lu, "HOST_WIDE_INT_PRINT_DEC"\n",
+      fprintf (f, "\t.cfi_def_cfa %lu, " HOST_WIDE_INT_PRINT_DEC "\n",
 	       r, cfi->dw_cfi_oprnd2.dw_cfi_offset);
       break;
 
@@ -3299,7 +3299,7 @@
     case DW_CFA_def_cfa_offset:
     case DW_CFA_def_cfa_offset_sf:
       fprintf (f, "\t.cfi_def_cfa_offset "
-	       HOST_WIDE_INT_PRINT_DEC"\n",
+	       HOST_WIDE_INT_PRINT_DEC "\n",
 	       cfi->dw_cfi_oprnd1.dw_cfi_offset);
       break;
 
@@ -3316,13 +3316,13 @@
 	  fprintf (f, "\t.cfi_escape %#x,", DW_CFA_GNU_args_size);
 	  dw2_asm_output_data_uleb128_raw (cfi->dw_cfi_oprnd1.dw_cfi_offset);
 	  if (flag_debug_asm)
-	    fprintf (f, "\t%s args_size "HOST_WIDE_INT_PRINT_DEC,
+	    fprintf (f, "\t%s args_size " HOST_WIDE_INT_PRINT_DEC,
 		     ASM_COMMENT_START, cfi->dw_cfi_oprnd1.dw_cfi_offset);
 	  fputc ('\n', f);
 	}
       else
 	{
-	  fprintf (f, "\t.cfi_GNU_args_size "HOST_WIDE_INT_PRINT_DEC "\n",
+	  fprintf (f, "\t.cfi_GNU_args_size " HOST_WIDE_INT_PRINT_DEC "\n",
 		   cfi->dw_cfi_oprnd1.dw_cfi_offset);
 	}
       break;
diff -x *~ -uNr orig/gcc-5.4.0/gcc/dwarf2out.c sources/gcc-5.4.0/gcc/dwarf2out.c
--- orig/gcc-5.4.0/gcc/dwarf2out.c	2016-05-20 10:51:06.000000000 +0200
+++ sources/gcc-5.4.0/gcc/dwarf2out.c	2019-08-18 21:05:37.625767000 +0200
@@ -5450,7 +5450,7 @@
       fprintf (outfile, HOST_WIDE_INT_PRINT_UNSIGNED, val->v.val_unsigned);
       break;
     case dw_val_class_const_double:
-      fprintf (outfile, "constant ("HOST_WIDE_INT_PRINT_DEC","\
+      fprintf (outfile, "constant (" HOST_WIDE_INT_PRINT_DEC ","\
 			HOST_WIDE_INT_PRINT_UNSIGNED")",
 	       val->v.val_double.high,
 	       val->v.val_double.low);
diff -x *~ -uNr orig/gcc-5.4.0/gcc/final.c sources/gcc-5.4.0/gcc/final.c
--- orig/gcc-5.4.0/gcc/final.c	2015-01-15 14:28:42.000000000 +0100
+++ sources/gcc-5.4.0/gcc/final.c	2019-08-18 21:06:36.196045000 +0200
@@ -1989,7 +1989,7 @@
       if (bb->frequency)
         fprintf (file, " freq:%d", bb->frequency);
       if (bb->count)
-        fprintf (file, " count:%"PRId64,
+        fprintf (file, " count:%" PRId64,
                  bb->count);
       fprintf (file, " seq:%d", (*bb_seqn)++);
       fprintf (file, "\n%s PRED:", ASM_COMMENT_START);
diff -x *~ -uNr orig/gcc-5.4.0/gcc/gcc.c sources/gcc-5.4.0/gcc/gcc.c
--- orig/gcc-5.4.0/gcc/gcc.c	2015-03-10 10:37:41.000000000 +0100
+++ sources/gcc-5.4.0/gcc/gcc.c	2019-08-18 21:30:00.152473000 +0200
@@ -771,12 +771,12 @@
 #define PLUGIN_COND_CLOSE ""
 #endif
 #define LINK_PLUGIN_SPEC \
-    "%{"PLUGIN_COND": \
+    "%{" PLUGIN_COND ": \
     -plugin %(linker_plugin_file) \
     -plugin-opt=%(lto_wrapper) \
     -plugin-opt=-fresolution=%u.res \
     %{!nostdlib:%{!nodefaultlibs:%:pass-through-libs(%(link_gcc_c_sequence))}} \
-    }"PLUGIN_COND_CLOSE
+    }" PLUGIN_COND_CLOSE
 #else
 /* The linker used doesn't support -plugin, reject -fuse-linker-plugin.  */
 #define LINK_PLUGIN_SPEC "%{fuse-linker-plugin:\
diff -x *~ -uNr orig/gcc-5.4.0/gcc/gcov-dump.c sources/gcc-5.4.0/gcc/gcov-dump.c
--- orig/gcc-5.4.0/gcc/gcov-dump.c	2015-01-05 13:05:46.000000000 +0100
+++ sources/gcc-5.4.0/gcc/gcov-dump.c	2019-08-18 21:28:42.207395000 +0200
@@ -448,7 +448,7 @@
 
 	  count = gcov_read_counter ();
 	  printf (" ");
-	  printf ("%"PRId64, count);
+	  printf ("%" PRId64, count);
 	}
     }
 }
@@ -471,11 +471,11 @@
       printf ("\t\tcounts=%u, runs=%u",
 	      summary.ctrs[ix].num, summary.ctrs[ix].runs);
 
-      printf (", sum_all=%"PRId64,
+      printf (", sum_all=%" PRId64,
 	      (int64_t)summary.ctrs[ix].sum_all);
-      printf (", run_max=%"PRId64,
+      printf (", run_max=%" PRId64,
 	      (int64_t)summary.ctrs[ix].run_max);
-      printf (", sum_max=%"PRId64,
+      printf (", sum_max=%" PRId64,
 	      (int64_t)summary.ctrs[ix].sum_max);
       if (ix != GCOV_COUNTER_ARCS)
         continue;
@@ -490,8 +490,8 @@
           printf ("\n");
           print_prefix (filename, 0, 0);
           printf ("\t\t%d: num counts=%u, min counter="
-              "%"PRId64 ", cum_counter="
-              "%"PRId64,
+              "%" PRId64 ", cum_counter="
+              "%" PRId64,
 	      h_ix, histo_bucket->num_counters,
               (int64_t)histo_bucket->min_value,
               (int64_t)histo_bucket->cum_value);
@@ -526,7 +526,7 @@
       printf ("\n");
       print_prefix (filename, 0, 0);
       printf ("\t\t%u.%02u%%: num counts=%u, min counter="
-               "%"PRId64,
+               "%" PRId64,
                pct / 100, pct - (pct / 100 * 100),
                ws_info->num_counters,
                (int64_t)ws_info->min_counter);
diff -x *~ -uNr orig/gcc-5.4.0/gcc/gcov.c sources/gcc-5.4.0/gcc/gcov.c
--- orig/gcc-5.4.0/gcc/gcov.c	2015-04-11 14:08:26.000000000 +0200
+++ sources/gcc-5.4.0/gcc/gcov.c	2019-08-18 21:28:31.304821000 +0200
@@ -1846,7 +1846,7 @@
 	}
     }
   else
-    sprintf (buffer, "%"PRId64, (int64_t)top);
+    sprintf (buffer, "%" PRId64, (int64_t)top);
 
   return buffer;
 }
diff -x *~ -uNr orig/gcc-5.4.0/gcc/ipa-cp.c sources/gcc-5.4.0/gcc/ipa-cp.c
--- orig/gcc-5.4.0/gcc/ipa-cp.c	2015-12-14 17:31:26.000000000 +0100
+++ sources/gcc-5.4.0/gcc/ipa-cp.c	2019-08-18 21:09:06.929798000 +0200
@@ -2202,7 +2202,7 @@
       if (dump_file && (dump_flags & TDF_DETAILS))
 	fprintf (dump_file, "     good_cloning_opportunity_p (time: %i, "
 		 "size: %i, count_sum: " HOST_WIDE_INT_PRINT_DEC
-		 "%s%s) -> evaluation: " "%"PRId64
+		 "%s%s) -> evaluation: " "%" PRId64
 		 ", threshold: %i\n",
 		 time_benefit, size_cost, (HOST_WIDE_INT) count_sum,
 		 info->node_within_scc ? ", scc" : "",
@@ -2220,7 +2220,7 @@
       if (dump_file && (dump_flags & TDF_DETAILS))
 	fprintf (dump_file, "     good_cloning_opportunity_p (time: %i, "
 		 "size: %i, freq_sum: %i%s%s) -> evaluation: "
-		 "%"PRId64 ", threshold: %i\n",
+		 "%" PRId64 ", threshold: %i\n",
 		 time_benefit, size_cost, freq_sum,
 		 info->node_within_scc ? ", scc" : "",
 		 info->node_calling_single_call ? ", single_call" : "",
diff -x *~ -uNr orig/gcc-5.4.0/gcc/ipa-inline.c sources/gcc-5.4.0/gcc/ipa-inline.c
--- orig/gcc-5.4.0/gcc/ipa-inline.c	2015-05-17 19:43:04.000000000 +0200
+++ sources/gcc-5.4.0/gcc/ipa-inline.c	2019-08-18 21:13:06.558827000 +0200
@@ -1191,8 +1191,8 @@
       if (dump)
 	{
 	  fprintf (dump_file,
-		   "      %f: guessed profile. frequency %f, count %"PRId64
-		   " caller count %"PRId64
+		   "      %f: guessed profile. frequency %f, count %" PRId64
+		   " caller count %" PRId64
 		   " time w/o inlining %f, time w inlining %f"
 		   " overall growth %i (current) %i (original)"
 		   " %i (compensated)\n",
@@ -1974,7 +1974,7 @@
 		   badness.to_double (),
 		   edge->frequency / (double)CGRAPH_FREQ_BASE);
 	  if (edge->count)
-	    fprintf (dump_file," Called %"PRId64"x\n",
+	    fprintf (dump_file," Called %" PRId64 "x\n",
 		     edge->count);
 	  if (dump_flags & TDF_DETAILS)
 	    edge_badness (edge, true);
@@ -2261,8 +2261,8 @@
 	sum_weighted += time * node->count;
       }
   fprintf (dump_file, "Overall time estimate: "
-	   "%"PRId64" weighted by profile: "
-	   "%"PRId64"\n", sum, sum_weighted);
+	   "%" PRId64 " weighted by profile: "
+	   "%" PRId64 "\n", sum, sum_weighted);
 }
 
 /* Output some useful stats about inlining.  */
@@ -2340,31 +2340,31 @@
   if (max_count)
     {
       fprintf (dump_file,
-	       "Inlined %"PRId64 " + speculative "
-	       "%"PRId64 " + speculative polymorphic "
-	       "%"PRId64 " + previously indirect "
-	       "%"PRId64 " + virtual "
-	       "%"PRId64 " + virtual and previously indirect "
-	       "%"PRId64 "\n" "Not inlined "
-	       "%"PRId64 " + previously indirect "
-	       "%"PRId64 " + virtual "
-	       "%"PRId64 " + virtual and previously indirect "
-	       "%"PRId64 " + stil indirect "
-	       "%"PRId64 " + still indirect polymorphic "
-	       "%"PRId64 "\n", inlined_cnt,
+	       "Inlined %" PRId64 " + speculative "
+	       "%" PRId64 " + speculative polymorphic "
+	       "%" PRId64 " + previously indirect "
+	       "%" PRId64 " + virtual "
+	       "%" PRId64 " + virtual and previously indirect "
+	       "%" PRId64 "\n" "Not inlined "
+	       "%" PRId64 " + previously indirect "
+	       "%" PRId64 " + virtual "
+	       "%" PRId64 " + virtual and previously indirect "
+	       "%" PRId64 " + stil indirect "
+	       "%" PRId64 " + still indirect polymorphic "
+	       "%" PRId64 "\n", inlined_cnt,
 	       inlined_speculative, inlined_speculative_ply,
 	       inlined_indir_cnt, inlined_virt_cnt, inlined_virt_indir_cnt,
 	       noninlined_cnt, noninlined_indir_cnt, noninlined_virt_cnt,
 	       noninlined_virt_indir_cnt, indirect_cnt, indirect_poly_cnt);
       fprintf (dump_file,
-	       "Removed speculations %"PRId64 "\n",
+	       "Removed speculations %" PRId64 "\n",
 	       spec_rem);
     }
   dump_overall_stats ();
   fprintf (dump_file, "\nWhy inlining failed?\n");
   for (i = 0; i < CIF_N_REASONS; i++)
     if (reason[i][2])
-      fprintf (dump_file, "%-50s: %8i calls, %8i freq, %"PRId64" count\n",
+      fprintf (dump_file, "%-50s: %8i calls, %8i freq, %" PRId64 " count\n",
 	       cgraph_inline_failed_string ((cgraph_inline_failed_t) i),
 	       (int) reason[i][2], (int) reason[i][1], reason[i][0]);
 }
diff -x *~ -uNr orig/gcc-5.4.0/gcc/ipa-polymorphic-call.c sources/gcc-5.4.0/gcc/ipa-polymorphic-call.c
--- orig/gcc-5.4.0/gcc/ipa-polymorphic-call.c	2016-05-23 12:41:35.000000000 +0200
+++ sources/gcc-5.4.0/gcc/ipa-polymorphic-call.c	2019-08-18 21:09:53.059651000 +0200
@@ -661,7 +661,7 @@
 	    fprintf (f, " (or a derived type)");
 	  if (maybe_in_construction)
 	    fprintf (f, " (maybe in construction)");
-	  fprintf (f, " offset "HOST_WIDE_INT_PRINT_DEC,
+	  fprintf (f, " offset " HOST_WIDE_INT_PRINT_DEC,
 		   offset);
 	}
       if (speculative_outer_type)
@@ -672,7 +672,7 @@
 	  print_generic_expr (f, speculative_outer_type, TDF_SLIM);
 	  if (speculative_maybe_derived_type)
 	    fprintf (f, " (or a derived type)");
-	  fprintf (f, " at offset "HOST_WIDE_INT_PRINT_DEC,
+	  fprintf (f, " at offset " HOST_WIDE_INT_PRINT_DEC,
 		   speculative_offset);
 	}
     }
diff -x *~ -uNr orig/gcc-5.4.0/gcc/ipa-profile.c sources/gcc-5.4.0/gcc/ipa-profile.c
--- orig/gcc-5.4.0/gcc/ipa-profile.c	2015-02-17 22:57:53.000000000 +0100
+++ sources/gcc-5.4.0/gcc/ipa-profile.c	2019-08-18 21:13:52.047678000 +0200
@@ -186,7 +186,7 @@
     {
       cumulated_time += histogram[i]->count * histogram[i]->time;
       cumulated_size += histogram[i]->size;
-      fprintf (file, "  %"PRId64": time:%i (%2.2f) size:%i (%2.2f)\n",
+      fprintf (file, "  %" PRId64 ": time:%i (%2.2f) size:%i (%2.2f)\n",
 	       (int64_t) histogram[i]->count,
 	       histogram[i]->time,
 	       cumulated_time * 100.0 / overall_time,
@@ -542,7 +542,7 @@
 	{
 	  gcov_type min, cumulated_time = 0, cumulated_size = 0;
 
-	  fprintf (dump_file, "Overall time: %"PRId64"\n",
+	  fprintf (dump_file, "Overall time: %" PRId64 "\n",
 		   (int64_t)overall_time);
 	  min = get_hot_bb_threshold ();
           for (i = 0; i < (int)histogram.length () && histogram[i]->count >= min;
@@ -551,7 +551,7 @@
 	      cumulated_time += histogram[i]->count * histogram[i]->time;
 	      cumulated_size += histogram[i]->size;
 	    }
-	  fprintf (dump_file, "GCOV min count: %"PRId64
+	  fprintf (dump_file, "GCOV min count: %" PRId64
 		   " Time:%3.2f%% Size:%3.2f%%\n", 
 		   (int64_t)min,
 		   cumulated_time * 100.0 / overall_time,
@@ -577,7 +577,7 @@
 	      cumulated_time += histogram[i]->count * histogram[i]->time;
 	      cumulated_size += histogram[i]->size;
 	    }
-	  fprintf (dump_file, "Determined min count: %"PRId64
+	  fprintf (dump_file, "Determined min count: %" PRId64
 		   " Time:%3.2f%% Size:%3.2f%%\n", 
 		   (int64_t)threshold,
 		   cumulated_time * 100.0 / overall_time,
diff -x *~ -uNr orig/gcc-5.4.0/gcc/ipa-prop.c sources/gcc-5.4.0/gcc/ipa-prop.c
--- orig/gcc-5.4.0/gcc/ipa-prop.c	2016-05-19 17:10:50.000000000 +0200
+++ sources/gcc-5.4.0/gcc/ipa-prop.c	2019-08-18 21:14:17.159976000 +0200
@@ -300,7 +300,7 @@
       else if (type == IPA_JF_ANCESTOR)
 	{
 	  fprintf (f, "ANCESTOR: ");
-	  fprintf (f, "%d, offset "HOST_WIDE_INT_PRINT_DEC,
+	  fprintf (f, "%d, offset " HOST_WIDE_INT_PRINT_DEC,
 		   jump_func->value.ancestor.formal_id,
 		   jump_func->value.ancestor.offset);
 	  if (jump_func->value.ancestor.agg_preserved)
diff -x *~ -uNr orig/gcc-5.4.0/gcc/ira-color.c sources/gcc-5.4.0/gcc/ira-color.c
--- orig/gcc-5.4.0/gcc/ira-color.c	2015-09-30 18:39:44.000000000 +0200
+++ sources/gcc-5.4.0/gcc/ira-color.c	2019-08-18 21:15:58.214866000 +0200
@@ -548,7 +548,7 @@
 	fprintf (f, " ");
       fprintf (f, "%d:(", node->preorder_num);
       print_hard_reg_set (f, node->hard_regs->set, false);
-      fprintf (f, ")@%"PRId64"\n", node->hard_regs->cost);
+      fprintf (f, ")@%" PRId64 "\n", node->hard_regs->cost);
       print_hard_regs_subforest (f, node->first, level + 1);
     }
 }
diff -x *~ -uNr orig/gcc-5.4.0/gcc/ira.c sources/gcc-5.4.0/gcc/ira.c
--- orig/gcc-5.4.0/gcc/ira.c	2016-03-31 15:13:13.000000000 +0200
+++ sources/gcc-5.4.0/gcc/ira.c	2019-08-18 21:15:09.588439000 +0200
@@ -2508,12 +2508,12 @@
   if (internal_flag_ira_verbose > 0 && ira_dump_file != NULL)
     {
       fprintf (ira_dump_file,
-	       "+++Costs: overall %"PRId64
-	       ", reg %"PRId64
-	       ", mem %"PRId64
-	       ", ld %"PRId64
-	       ", st %"PRId64
-	       ", move %"PRId64,
+	       "+++Costs: overall %" PRId64
+	       ", reg %" PRId64
+	       ", mem %" PRId64
+	       ", ld %" PRId64
+	       ", st %" PRId64
+	       ", move %" PRId64,
 	       ira_overall_cost, ira_reg_cost, ira_mem_cost,
 	       ira_load_cost, ira_store_cost, ira_shuffle_cost);
       fprintf (ira_dump_file, "\n+++       move loops %d, new jumps %d\n",
@@ -5467,7 +5467,7 @@
 
   if (internal_flag_ira_verbose > 0 && ira_dump_file != NULL
       && overall_cost_before != ira_overall_cost)
-    fprintf (ira_dump_file, "+++Overall after reload %"PRId64 "\n",
+    fprintf (ira_dump_file, "+++Overall after reload %" PRId64 "\n",
 	     ira_overall_cost);
 
   flag_ira_share_spill_slots = saved_flag_ira_share_spill_slots;
diff -x *~ -uNr orig/gcc-5.4.0/gcc/loop-iv.c sources/gcc-5.4.0/gcc/loop-iv.c
--- orig/gcc-5.4.0/gcc/loop-iv.c	2015-01-20 09:29:09.000000000 +0100
+++ sources/gcc-5.4.0/gcc/loop-iv.c	2019-08-18 21:16:32.201914000 +0200
@@ -2357,7 +2357,7 @@
   if (andmax)
     nmax = MIN (nmax, andmax);
   if (dump_file)
-    fprintf (dump_file, ";; Determined upper bound %"PRId64".\n",
+    fprintf (dump_file, ";; Determined upper bound %" PRId64 ".\n",
 	     nmax);
   return nmax;
 }
diff -x *~ -uNr orig/gcc-5.4.0/gcc/mcf.c sources/gcc-5.4.0/gcc/mcf.c
--- orig/gcc-5.4.0/gcc/mcf.c	2015-01-05 13:33:28.000000000 +0100
+++ sources/gcc-5.4.0/gcc/mcf.c	2019-08-18 21:17:33.293602000 +0200
@@ -214,12 +214,12 @@
 
   if (fedge->type)
     {
-      fprintf (file, "flow/capacity=%"PRId64 "/",
+      fprintf (file, "flow/capacity=%" PRId64 "/",
 	       fedge->flow);
       if (fedge->max_capacity == CAP_INFINITY)
 	fputs ("+oo,", file);
       else
-	fprintf (file, "%"PRId64 ",", fedge->max_capacity);
+	fprintf (file, "%" PRId64 ",", fedge->max_capacity);
     }
 
   if (fedge->is_rflow_valid)
@@ -227,10 +227,10 @@
       if (fedge->rflow == CAP_INFINITY)
 	fputs (" rflow=+oo.", file);
       else
-	fprintf (file, " rflow=%"PRId64 ",", fedge->rflow);
+	fprintf (file, " rflow=%" PRId64 ",", fedge->rflow);
     }
 
-  fprintf (file, " cost=%"PRId64 ".", fedge->cost);
+  fprintf (file, " cost=%" PRId64 ".", fedge->cost);
 
   fprintf (file, "\t(%d->%d)", fedge->src, fedge->dest);
 
@@ -637,9 +637,9 @@
   if (dump_file)
     {
       fprintf (dump_file, "\nAdjust supply and demand:\n");
-      fprintf (dump_file, "supply_value=%"PRId64 "\n",
+      fprintf (dump_file, "supply_value=%" PRId64 "\n",
 	       supply_value);
-      fprintf (dump_file, "demand_value=%"PRId64 "\n",
+      fprintf (dump_file, "demand_value=%" PRId64 "\n",
 	       demand_value);
     }
 
@@ -909,10 +909,10 @@
     {
       fprintf (dump_file, "%d", cycle[k]);
       fprintf (dump_file,
-	       ": (%"PRId64 ", %"PRId64
+	       ": (%" PRId64 ", %" PRId64
 	       ")\n", sum_cost, cycle_flow);
       fprintf (dump_file,
-	       "Augment cycle with %"PRId64 "\n",
+	       "Augment cycle with %" PRId64 "\n",
 	       cycle_flow);
     }
 
@@ -1104,10 +1104,10 @@
 	      fprintf (dump_file, "<-");
 	    }
 	  fprintf (dump_file,
-		   "ENTRY  (path_capacity=%"PRId64 ")\n",
+		   "ENTRY  (path_capacity=%" PRId64 ")\n",
 		   increment);
 	  fprintf (dump_file,
-		   "Network flow is %"PRId64 ".\n",
+		   "Network flow is %" PRId64 ".\n",
 		   max_flow);
 	}
     }
@@ -1144,7 +1144,7 @@
       /* Fixup BB.  */
       if (dump_file)
         fprintf (dump_file,
-                 "BB%d: %"PRId64 "", bb->index, bb->count);
+                 "BB%d: %" PRId64 "", bb->index, bb->count);
 
       pfedge = find_fixup_edge (fixup_graph, i, i + 1);
       if (pfedge->flow)
@@ -1152,7 +1152,7 @@
           bb->count += pfedge->flow;
 	  if (dump_file)
 	    {
-	      fprintf (dump_file, " + %"PRId64 "(",
+	      fprintf (dump_file, " + %" PRId64 "(",
 	               pfedge->flow);
 	      print_edge (dump_file, fixup_graph, i, i + 1);
 	      fprintf (dump_file, ")");
@@ -1167,7 +1167,7 @@
           bb->count -= pfedge_n->flow;
 	  if (dump_file)
 	    {
-	      fprintf (dump_file, " - %"PRId64 "(",
+	      fprintf (dump_file, " - %" PRId64 "(",
 		       pfedge_n->flow);
 	      print_edge (dump_file, fixup_graph, i + 1,
 			  pfedge->norm_vertex_index);
@@ -1175,7 +1175,7 @@
 	    }
         }
       if (dump_file)
-        fprintf (dump_file, " = %"PRId64 "\n", bb->count);
+        fprintf (dump_file, " = %" PRId64 "\n", bb->count);
 
       /* Fixup edge.  */
       FOR_EACH_EDGE (e, ei, bb->succs)
@@ -1186,7 +1186,7 @@
 
           j = 2 * e->dest->index;
           if (dump_file)
-	    fprintf (dump_file, "%d->%d: %"PRId64 "",
+	    fprintf (dump_file, "%d->%d: %" PRId64 "",
 		     bb->index, e->dest->index, e->count);
 
           pfedge = find_fixup_edge (fixup_graph, i + 1, j);
@@ -1199,7 +1199,7 @@
 	          e->count += pfedge->flow;
 	          if (dump_file)
 		    {
-		      fprintf (dump_file, " + %"PRId64 "(",
+		      fprintf (dump_file, " + %" PRId64 "(",
 			       pfedge->flow);
 		      print_edge (dump_file, fixup_graph, i + 1, j);
 		      fprintf (dump_file, ")");
@@ -1214,7 +1214,7 @@
 	          e->count -= pfedge_n->flow;
 	          if (dump_file)
 		    {
-		      fprintf (dump_file, " - %"PRId64 "(",
+		      fprintf (dump_file, " - %" PRId64 "(",
 			       pfedge_n->flow);
 		      print_edge (dump_file, fixup_graph, j,
 			          pfedge->norm_vertex_index);
@@ -1234,7 +1234,7 @@
 	      if (dump_file)
 	        {
 	          fprintf (dump_file, "(self edge)");
-	          fprintf (dump_file, " + %"PRId64 "(",
+	          fprintf (dump_file, " + %" PRId64 "(",
 		           pfedge_n->flow);
 	          print_edge (dump_file, fixup_graph, i + 1,
 			      pfedge->norm_vertex_index);
@@ -1245,7 +1245,7 @@
           if (bb->count)
 	    e->probability = REG_BR_PROB_BASE * e->count / bb->count;
           if (dump_file)
-	    fprintf (dump_file, " = %"PRId64 "\t(%.1f%%)\n",
+	    fprintf (dump_file, " = %" PRId64 "\t(%.1f%%)\n",
 		     e->count, e->probability * 100.0 / REG_BR_PROB_BASE);
         }
     }
@@ -1298,14 +1298,14 @@
                || (bb->count != sum_edge_counts (bb->succs)))
             {
               fprintf (dump_file,
-                       "BB%d(%"PRId64 ")  **INVALID**: ",
+                       "BB%d(%" PRId64 ")  **INVALID**: ",
                        bb->index, bb->count);
               fprintf (stderr,
-                       "******** BB%d(%"PRId64
+                       "******** BB%d(%" PRId64
                        ")  **INVALID**: \n", bb->index, bb->count);
-              fprintf (dump_file, "in_edges=%"PRId64 " ",
+              fprintf (dump_file, "in_edges=%" PRId64 " ",
                        sum_edge_counts (bb->preds));
-              fprintf (dump_file, "out_edges=%"PRId64 "\n",
+              fprintf (dump_file, "out_edges=%" PRId64 "\n",
                        sum_edge_counts (bb->succs));
             }
          }
diff -x *~ -uNr orig/gcc-5.4.0/gcc/modulo-sched.c sources/gcc-5.4.0/gcc/modulo-sched.c
--- orig/gcc-5.4.0/gcc/modulo-sched.c	2016-05-23 12:41:35.000000000 +0200
+++ sources/gcc-5.4.0/gcc/modulo-sched.c	2019-08-18 21:17:58.442270000 +0200
@@ -1487,15 +1487,15 @@
 	      if (profile_info && flag_branch_probabilities)
 	    	{
 	      	  fprintf (dump_file, "SMS loop-count ");
-	      	  fprintf (dump_file, "%"PRId64,
+	      	  fprintf (dump_file, "%" PRId64,
 	             	   (int64_t) bb->count);
 	      	  fprintf (dump_file, "\n");
                   fprintf (dump_file, "SMS trip-count ");
-                  fprintf (dump_file, "%"PRId64,
+                  fprintf (dump_file, "%" PRId64,
                            (int64_t) trip_count);
                   fprintf (dump_file, "\n");
 	      	  fprintf (dump_file, "SMS profile-sum-max ");
-	      	  fprintf (dump_file, "%"PRId64,
+	      	  fprintf (dump_file, "%" PRId64,
 	          	   (int64_t) profile_info->sum_max);
 	      	  fprintf (dump_file, "\n");
 	    	}
@@ -1609,11 +1609,11 @@
 	  if (profile_info && flag_branch_probabilities)
 	    {
 	      fprintf (dump_file, "SMS loop-count ");
-	      fprintf (dump_file, "%"PRId64,
+	      fprintf (dump_file, "%" PRId64,
 	               (int64_t) bb->count);
 	      fprintf (dump_file, "\n");
 	      fprintf (dump_file, "SMS profile-sum-max ");
-	      fprintf (dump_file, "%"PRId64,
+	      fprintf (dump_file, "%" PRId64,
 	               (int64_t) profile_info->sum_max);
 	      fprintf (dump_file, "\n");
 	    }
@@ -1640,7 +1640,7 @@
       if (dump_file && count_init)
         {
           fprintf (dump_file, "SMS const-doloop ");
-          fprintf (dump_file, "%"PRId64,
+          fprintf (dump_file, "%" PRId64,
 		     loop_count);
           fprintf (dump_file, "\n");
         }
@@ -1701,9 +1701,9 @@
 		  fprintf (dump_file, "SMS failed... \n");
 		  fprintf (dump_file, "SMS sched-failed (stage-count=%d,"
 			   " loop-count=", stage_count);
-		  fprintf (dump_file, "%"PRId64, loop_count);
+		  fprintf (dump_file, "%" PRId64, loop_count);
 		  fprintf (dump_file, ", trip-count=");
-		  fprintf (dump_file, "%"PRId64, trip_count);
+		  fprintf (dump_file, "%" PRId64, trip_count);
 		  fprintf (dump_file, ")\n");
 		}
 	      break;
diff -x *~ -uNr orig/gcc-5.4.0/gcc/predict.c sources/gcc-5.4.0/gcc/predict.c
--- orig/gcc-5.4.0/gcc/predict.c	2015-01-29 08:43:14.000000000 +0100
+++ sources/gcc-5.4.0/gcc/predict.c	2019-08-18 21:18:49.331927000 +0200
@@ -714,10 +714,10 @@
 
   if (bb->count)
     {
-      fprintf (file, "  exec %"PRId64, bb->count);
+      fprintf (file, "  exec %" PRId64, bb->count);
       if (e)
 	{
-	  fprintf (file, " hit %"PRId64, e->count);
+	  fprintf (file, " hit %" PRId64, e->count);
 	  fprintf (file, " (%.1f%%)", e->count * 100.0 / bb->count);
 	}
     }
diff -x *~ -uNr orig/gcc-5.4.0/gcc/profile.c sources/gcc-5.4.0/gcc/profile.c
--- orig/gcc-5.4.0/gcc/profile.c	2015-01-15 14:28:42.000000000 +0100
+++ sources/gcc-5.4.0/gcc/profile.c	2019-08-18 21:19:51.849503000 +0200
@@ -276,7 +276,7 @@
           ws_info = &gcov_working_sets[ws_ix];
           /* Print out the percentage using int arithmatic to avoid float.  */
           fprintf (dump_file, "\t\t%u.%02u%%: num counts=%u, min counter="
-                   "%"PRId64 "\n",
+                   "%" PRId64 "\n",
                    pct / 100, pct - (pct / 100 * 100),
                    ws_info->num_counters,
                    (int64_t)ws_info->min_counter);
@@ -357,7 +357,7 @@
 	      if (dump_file)
 		{
 		  fprintf (dump_file,
-		  	   "Edge %i->%i is inconsistent, count%"PRId64,
+		  	   "Edge %i->%i is inconsistent, count%" PRId64,
 			   e->src->index, e->dest->index, e->count);
 		  dump_bb (dump_file, e->src, 0, TDF_DETAILS);
 		  dump_bb (dump_file, e->dest, 0, TDF_DETAILS);
@@ -406,7 +406,7 @@
 	  if (dump_file)
 	    {
 	      fprintf (dump_file, "BB %i count is negative "
-		       "%"PRId64,
+		       "%" PRId64,
 		       bb->index,
 		       bb->count);
 	      dump_bb (dump_file, bb, 0, TDF_DETAILS);
@@ -418,7 +418,7 @@
 	  if (dump_file)
 	    {
 	      fprintf (dump_file, "BB %i count does not match sum of incoming edges "
-		       "%"PRId64" should be %"PRId64,
+		       "%" PRId64" should be %" PRId64,
 		       bb->index,
 		       bb->count,
 		       sum_edge_counts (bb->preds));
@@ -433,7 +433,7 @@
 	  if (dump_file)
 	    {
 	      fprintf (dump_file, "BB %i count does not match sum of outgoing edges "
-		       "%"PRId64" should be %"PRId64,
+		       "%" PRId64" should be %" PRId64,
 		       bb->index,
 		       bb->count,
 		       sum_edge_counts (bb->succs));
@@ -510,7 +510,7 @@
 	      {
 		fprintf (dump_file, "\nRead edge from %i to %i, count:",
 			 bb->index, e->dest->index);
-		fprintf (dump_file, "%"PRId64,
+		fprintf (dump_file, "%" PRId64,
 			 (int64_t) e->count);
 	      }
 	  }
diff -x *~ -uNr orig/gcc-5.4.0/gcc/stor-layout.c sources/gcc-5.4.0/gcc/stor-layout.c
--- orig/gcc-5.4.0/gcc/stor-layout.c	2015-08-17 17:44:35.000000000 +0200
+++ sources/gcc-5.4.0/gcc/stor-layout.c	2019-08-18 21:21:31.385297000 +0200
@@ -262,7 +262,7 @@
   fntype = build_function_type (return_type, param_type_list);
 
   /* Build the function declaration.  */
-  sprintf (buf, "SZ"HOST_WIDE_INT_PRINT_UNSIGNED, fnno++);
+  sprintf (buf, "SZ" HOST_WIDE_INT_PRINT_UNSIGNED, fnno++);
   fnname = get_file_function_name (buf);
   fndecl = build_decl (input_location, FUNCTION_DECL, fnname, fntype);
   for (t = param_decl_list; t; t = DECL_CHAIN (t))
diff -x *~ -uNr orig/gcc-5.4.0/gcc/toplev.c sources/gcc-5.4.0/gcc/toplev.c
--- orig/gcc-5.4.0/gcc/toplev.c	2015-07-10 14:33:28.000000000 +0200
+++ sources/gcc-5.4.0/gcc/toplev.c	2019-08-18 21:22:06.870660000 +0200
@@ -1122,7 +1122,7 @@
 	}
 
       fprintf (stack_usage_file,
-	       "%s:%d:%d:%s\t"HOST_WIDE_INT_PRINT_DEC"\t%s\n",
+	       "%s:%d:%d:%s\t" HOST_WIDE_INT_PRINT_DEC "\t%s\n",
 	       lbasename (loc.file),
 	       loc.line,
 	       loc.column,
diff -x *~ -uNr orig/gcc-5.4.0/gcc/tree-ssa-reassoc.c sources/gcc-5.4.0/gcc/tree-ssa-reassoc.c
--- orig/gcc-5.4.0/gcc/tree-ssa-reassoc.c	2016-03-30 14:30:40.000000000 +0200
+++ sources/gcc-5.4.0/gcc/tree-ssa-reassoc.c	2019-08-18 21:25:19.197106000 +0200
@@ -4599,7 +4599,7 @@
 		      if (elt < vec_len - 1)
 			fputs (" * ", dump_file);
 		    }
-		  fprintf (dump_file, ")^"HOST_WIDE_INT_PRINT_DEC"\n",
+		  fprintf (dump_file, ")^" HOST_WIDE_INT_PRINT_DEC "\n",
 			   power);
 		}
 	    }
@@ -4633,7 +4633,7 @@
 		  if (elt < vec_len - 1)
 		    fputs (" * ", dump_file);
 		}
-	      fprintf (dump_file, ")^"HOST_WIDE_INT_PRINT_DEC"\n", power);
+	      fprintf (dump_file, ")^" HOST_WIDE_INT_PRINT_DEC "\n", power);
 	    }
 
 	  reassociate_stats.pows_created++;
diff -x *~ -uNr orig/gcc-5.4.0/gcc/value-prof.c sources/gcc-5.4.0/gcc/value-prof.c
--- orig/gcc-5.4.0/gcc/value-prof.c	2015-03-06 17:12:43.000000000 +0100
+++ sources/gcc-5.4.0/gcc/value-prof.c	2019-08-18 21:27:12.657377000 +0200
@@ -296,10 +296,10 @@
 	   unsigned int i;
 	   fprintf (dump_file, " [");
            for (i = 0; i < hist->hdata.intvl.steps; i++)
-	     fprintf (dump_file, " %d:%"PRId64,
+	     fprintf (dump_file, " %d:%" PRId64,
 		      hist->hdata.intvl.int_start + i,
 		      (int64_t) hist->hvalue.counters[i]);
-	   fprintf (dump_file, " ] outside range:%"PRId64,
+	   fprintf (dump_file, " ] outside range:%" PRId64,
 		    (int64_t) hist->hvalue.counters[i]);
 	}
       fprintf (dump_file, ".\n");
@@ -309,8 +309,8 @@
       fprintf (dump_file, "Pow2 counter ");
       if (hist->hvalue.counters)
 	{
-	   fprintf (dump_file, "pow2:%"PRId64
-		    " nonpow2:%"PRId64,
+	   fprintf (dump_file, "pow2:%" PRId64
+		    " nonpow2:%" PRId64,
 		    (int64_t) hist->hvalue.counters[0],
 		    (int64_t) hist->hvalue.counters[1]);
 	}
@@ -321,9 +321,9 @@
       fprintf (dump_file, "Single value ");
       if (hist->hvalue.counters)
 	{
-	   fprintf (dump_file, "value:%"PRId64
-		    " match:%"PRId64
-		    " wrong:%"PRId64,
+	   fprintf (dump_file, "value:%" PRId64
+		    " match:%" PRId64
+		    " wrong:%" PRId64,
 		    (int64_t) hist->hvalue.counters[0],
 		    (int64_t) hist->hvalue.counters[1],
 		    (int64_t) hist->hvalue.counters[2]);
@@ -335,8 +335,8 @@
       fprintf (dump_file, "Average value ");
       if (hist->hvalue.counters)
 	{
-	   fprintf (dump_file, "sum:%"PRId64
-		    " times:%"PRId64,
+	   fprintf (dump_file, "sum:%" PRId64
+		    " times:%" PRId64,
 		    (int64_t) hist->hvalue.counters[0],
 		    (int64_t) hist->hvalue.counters[1]);
 	}
@@ -347,7 +347,7 @@
       fprintf (dump_file, "IOR value ");
       if (hist->hvalue.counters)
 	{
-	   fprintf (dump_file, "ior:%"PRId64,
+	   fprintf (dump_file, "ior:%" PRId64,
 		    (int64_t) hist->hvalue.counters[0]);
 	}
       fprintf (dump_file, ".\n");
@@ -357,9 +357,9 @@
       fprintf (dump_file, "Constant delta ");
       if (hist->hvalue.counters)
 	{
-	   fprintf (dump_file, "value:%"PRId64
-		    " match:%"PRId64
-		    " wrong:%"PRId64,
+	   fprintf (dump_file, "value:%" PRId64
+		    " match:%" PRId64
+		    " wrong:%" PRId64,
 		    (int64_t) hist->hvalue.counters[0],
 		    (int64_t) hist->hvalue.counters[1],
 		    (int64_t) hist->hvalue.counters[2]);
@@ -370,9 +370,9 @@
       fprintf (dump_file, "Indirect call ");
       if (hist->hvalue.counters)
 	{
-	   fprintf (dump_file, "value:%"PRId64
-		    " match:%"PRId64
-		    " all:%"PRId64,
+	   fprintf (dump_file, "value:%" PRId64
+		    " match:%" PRId64
+		    " all:%" PRId64,
 		    (int64_t) hist->hvalue.counters[0],
 		    (int64_t) hist->hvalue.counters[1],
 		    (int64_t) hist->hvalue.counters[2]);
@@ -383,7 +383,7 @@
       fprintf (dump_file, "Time profile ");
       if (hist->hvalue.counters)
       {
-        fprintf (dump_file, "time:%"PRId64,
+        fprintf (dump_file, "time:%" PRId64,
                  (int64_t) hist->hvalue.counters[0]);
       }
       fprintf (dump_file, ".\n");
@@ -394,10 +394,10 @@
 	{
            int i;
 
-           fprintf (dump_file, "accu:%"PRId64, hist->hvalue.counters[0]);
+           fprintf (dump_file, "accu:%" PRId64, hist->hvalue.counters[0]);
            for (i = 1; i < (GCOV_ICALL_TOPN_VAL << 2); i += 2)
              {
-               fprintf (dump_file, " target:%"PRId64 " value:%"PRId64,
+               fprintf (dump_file, " target:%" PRId64 " value:%" PRId64,
                        (int64_t) hist->hvalue.counters[i],
                        (int64_t) hist->hvalue.counters[i+1]);
              }
@@ -1666,8 +1666,8 @@
       print_generic_expr (dump_file, direct_call->decl, TDF_SLIM);
       fprintf (dump_file, " transformation on insn postponned to ipa-profile");
       print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);
-      fprintf (dump_file, "hist->count %"PRId64
-	       " hist->all %"PRId64"\n", count, all);
+      fprintf (dump_file, "hist->count %" PRId64
+	       " hist->all %" PRId64 "\n", count, all);
     }
 
   return true;
diff -x *~ -uNr orig/gcc-5.4.0/gcc/wide-int-print.cc sources/gcc-5.4.0/gcc/wide-int-print.cc
--- orig/gcc-5.4.0/gcc/wide-int-print.cc	2015-01-05 13:33:28.000000000 +0100
+++ sources/gcc-5.4.0/gcc/wide-int-print.cc	2019-08-18 21:27:52.105145000 +0200
@@ -127,7 +127,7 @@
 
 	}
       else
-	buf += sprintf (buf, "0x"HOST_WIDE_INT_PRINT_HEX_PURE, wi.elt (--i));
+	buf += sprintf (buf, "0x" HOST_WIDE_INT_PRINT_HEX_PURE, wi.elt (--i));
 
       while (--i >= 0)
 	buf += sprintf (buf, HOST_WIDE_INT_PRINT_PADDED_HEX, wi.elt (i));
diff -x *~ -uNr orig/gcc-5.4.0/libgcc/libgcov-util.c sources/gcc-5.4.0/libgcc/libgcov-util.c
--- orig/gcc-5.4.0/libgcc/libgcov-util.c	2015-02-27 14:19:38.000000000 +0100
+++ sources/gcc-5.4.0/libgcc/libgcov-util.c	2019-08-18 21:29:20.481563000 +0200
@@ -879,7 +879,7 @@
 
   scale_factor = (float)max_val / curr_max_val;
   if (verbose)
-    fnotice (stdout, "max_val is %"PRId64"\n", curr_max_val);
+    fnotice (stdout, "max_val is %" PRId64 "\n", curr_max_val);
 
   return gcov_profile_scale (profile, scale_factor, 0, 0);
 }
@@ -1383,8 +1383,8 @@
                                             cold_gcda_files[1], both_cold_cnt);
   printf ("    zero files:  %12u\t%12u\t%12u\n", zero_gcda_files[0],
                                             zero_gcda_files[1], both_zero_cnt);
-  printf ("       sum_all:  %12"PRId64"\t%12"PRId64"\n", p1_sum_all, p2_sum_all);
-  printf ("       run_max:  %12"PRId64"\t%12"PRId64"\n", p1_run_max, p2_run_max);
+  printf ("       sum_all:  %12" PRId64 "\t%12" PRId64 "\n", p1_sum_all, p2_sum_all);
+  printf ("       run_max:  %12" PRId64 "\t%12" PRId64 "\n", p1_run_max, p2_run_max);
 
   return prg_val;
 }
